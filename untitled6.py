# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-OloNjD4tm-bIwnQIShaHjACdfZz0lK4
"""

import matplotlib.pyplot as plt

celsius = [[-67.0], [-34.0], [0], [34.0], [54.0], [67.0], [100]]
fahrenheit = [[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]]

plt.figure(figsize=(15,8), dpi=50)
plt.scatter(celsius, fahrenheit, label='входные значения', color='green', marker='$f$');
plt.xlabel('celsius')
plt.ylabel('fahrenheit')
plt.legend()
plt.grid(True)
plt.show()

for c,f in zip(celsius, fahrenheit):
  print(f'цельсия{c}= фаренгейт {f}')

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr. fit(celsius, fahrenheit)
lr. predict([[256], [123]])
lr.coef_
lr.intercept_
celsius_test = [[-50], [10], [30], [20], [10], [70], [87]]
fahrenheit_test= lr.predict(celsius_test)
fahrenheit_test

for c,f in zip(celsius_test, fahrenheit_test):
  print(f'цельсия {c} фаренгейта{f}' )

import numpy as np

х_range = np.arange(-70, 120)
y_range = х_range*1.8+32

plt. figure(figsize=(15,8), dpi=280)
plt.plot(х_range, y_range, label='уравнение', linewidth='1')
plt.scatter(celsius, fahrenheit, label='входные данные', color='green')
plt.scatter(celsius_test, fahrenheit_test, label=' предсказанное значение', color='blue')
plt.xlabel('Цельсия')
plt.ylabel('Фаренгейта')
plt.legend()
plt. grid(True)
plt. show()

import matplotlib.pyplot as plt

def fahrenheit_to_kelvin(fahrenheit):
    return (fahrenheit - 32) * 5/9 + 273.15

fahrenheit = np.array([[-88.6], [-29.2], [32.0], [93.2], [129.2], [152.6], [212.0]])
kelvin = np.array([fahrenheit_to_kelvin(f) for f in fahrenheit])

plt.figure(figsize=(10, 6))
plt.scatter(fahrenheit, kelvin, label='входные значения', color='red', marker='$k$')
plt.xlabel('фаренгейт')
plt.ylabel('кельвина')
plt.legend()
plt.grid(True)
plt.show()

for f, k in zip(fahrenheit, kelvin):
  print(f" {f[0]:.1f} °F = {k[0]:.2f} K")

from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(fahrenheit, kelvin)

fahrenheit_test = np.array([[-50], [10], [30], [20], [10], [70], [87]])
kelvin_test = lr.predict(fahrenheit_test)

for f, k in zip(fahrenheit_test, kelvin_test):
  print(f" {f[0]:.1f} °F = {k[0]:.2f} K")

import numpy as np

x_range = np.arange(-100, 250)
y_range = x_range * 5/9 + 273.15


plt.figure(figsize=(10, 6))
plt.plot(x_range, y_range, label='уравнение', linewidth=1)
plt.scatter(fahrenheit, kelvin, label='входные данные', color='red')
plt.scatter(fahrenheit_test, kelvin_test, label='предсказанное значение', color='blue')
plt.xlabel('фаренгейт')
plt.ylabel('кельвина')
plt.legend()
plt.grid(True)
plt.xlim(-100, 250)
plt.ylim(170, 380)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

x = [1, 2, 3, 4, 5]
y = [1, 4, 9, 16, 25]
plt.figure()
plt.plot(x, y)
plt.xlabel("ось X")
plt.ylabel("ось Y")

data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]
plt.figure()
plt.hist(data, bins=5)
plt.xlabel("значения")
plt.ylabel("частота")

labels = 'A', 'B', 'C'
sizes = [30, 40, 30]
plt.figure()
plt.pie(sizes, labels=labels)

plt.show()

import math

e = math.e
print(f"число эйлера (e): {e}")

pi = math.pi
print(f"число пи (π): {pi}")

nan_value = float('nan')
print(f"nan: {nan_value}")

your_order_number = 20
factorial = math.factorial(your_order_number)
print(f"факториал порядкового номера ({your_order_number})!: {factorial}")

your_order_number = 20 #
phone_memory_gb = 128

gcd = math.gcd(your_order_number, phone_memory_gb)
print(f"наибольший общий делитель ({your_order_number}, {phone_memory_gb}): {gcd}")